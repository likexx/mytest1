// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package vvv

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// VvvClient is the client API for Vvv service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VvvClient interface {
	SayHello123(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error)
}

type vvvClient struct {
	cc grpc.ClientConnInterface
}

func NewVvvClient(cc grpc.ClientConnInterface) VvvClient {
	return &vvvClient{cc}
}

func (c *vvvClient) SayHello123(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error) {
	out := new(HelloReply)
	err := c.cc.Invoke(ctx, "/vvv.vvv.vvv/SayHello123", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VvvServer is the server API for Vvv service.
// All implementations must embed UnimplementedVvvServer
// for forward compatibility
type VvvServer interface {
	SayHello123(context.Context, *HelloRequest) (*HelloReply, error)
	mustEmbedUnimplementedVvvServer()
}

// UnimplementedVvvServer must be embedded to have forward compatible implementations.
type UnimplementedVvvServer struct {
}

func (UnimplementedVvvServer) SayHello123(context.Context, *HelloRequest) (*HelloReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayHello123 not implemented")
}
func (UnimplementedVvvServer) mustEmbedUnimplementedVvvServer() {}

// UnsafeVvvServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VvvServer will
// result in compilation errors.
type UnsafeVvvServer interface {
	mustEmbedUnimplementedVvvServer()
}

func RegisterVvvServer(s grpc.ServiceRegistrar, srv VvvServer) {
	s.RegisterService(&Vvv_ServiceDesc, srv)
}

func _Vvv_SayHello123_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VvvServer).SayHello123(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vvv.vvv.vvv/SayHello123",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VvvServer).SayHello123(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Vvv_ServiceDesc is the grpc.ServiceDesc for Vvv service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Vvv_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "vvv.vvv.vvv",
	HandlerType: (*VvvServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayHello123",
			Handler:    _Vvv_SayHello123_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "vvv.proto",
}
